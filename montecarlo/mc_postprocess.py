#!/usr/bin/env python
import argparse
import sys
import os
import re
import subprocess

import ROOT

EVENT_THRESHOLD = 0.05


def get_dag_information(dag_filename):
    """
    Parse dag file and get number of jobs in dag

    :return: (jobs, events, flavor) - number of jobs and events and mc type
    """
    jobs = 0
    events = 0
    flavor = None
    event_match = re.compile(r'events="(\d+)"')
    flavor_match = re.compile(r'flavor="(.*?)"')
    if not os.path.isfile(dag_filename):
        sys.stderr.write("{0} not found\n".format(dag_filename))
        return jobs, events
    with open(dag_filename, 'r') as dag_file:
        for line in dag_file:
            if line.startswith('JOB'):
                jobs += 1
            match = event_match.search(line)
            if match:
                events += int(match.group(1))
        dag_file.seek(0)
        match = flavor_match.search(dag_file.read(1024))
        if match:
            flavor = match.group(1)
    return jobs, events, flavor


def merge_files(file_list, result_dir):
    """

    :param file_list: list with root files to merge
    :param result_dir: path to directory to place results in
    :return: True on success, False otherwise
    """
    sample_file = file_list[0]
    fields = sample_file.split('_')
    del fields[3]
    output_file = "_".join(fields)
    command_line = ['hadd', output_file]
    command_line.extend(file_list)
    try:
        subprocess.check_call(command_line)
    except subprocess.CalledProcessError:
        sys.stderr.write("Can't combine files into {0}\n".format(file_list))
        return False
    if not os.path.isdir(result_dir):
        sys.stderr.write("{0} not present\n".format(result_dir))
        return False
    if not os.path.isfile(output_file):
        sys.stderr.write("{0} not present, couldn't ".format(output_file) +
                         "merge files\n")
        return False
    try:
        os.rename(output_file, os.path.join(result_dir, output_file))
    except IOError as e:
        sys.stderr.write("Got exception while moving results: {0}\n".format(e))
        return False
    except OSError as e:
        sys.stderr.write("Got exception while moving results: {0}\n".format(e))
        return False
    return True


def run_main():
    parser = argparse.ArgumentParser(description="Postprocess results generated by mc_process")
    parser.add_argument('--dagfile-file', dest='dag_file',
                        action='store', default='mc.dag',
                        help='file to write dag to')
    args = parser.parse_args(sys.argv[1:])
    jobs, events, flavor = get_dag_information(args.dag_file)
    if events == 0:
        sys.stdout.write("No events generated by this dag file\n")
        return 1
    if jobs == 0:
        sys.stdout.write("No jobs run by this dag file\n")
        return 1

    cur_dir = os.getcwd()
    if not os.path.isdir('output'):
        sys.stderr.write("Output directory not present\n")
        return 1
    os.chdir('output')
    if flavor == 'NEST':
        sort_suffix = 'Patch.root'
        geant_suffix = 'NEST.root'
    elif flavor == 'G4':
        sort_suffix = 'Sort.root'
        geant_suffix = 'G4.root'
    elif flavor == 'G4p10':
        sort_suffix = 'Sort.root'
        geant_suffix = 'G4p10.root'
    else:
        sys.stderr.write("MC flavor unknown: {0}\n".format(flavor))
        return 1

    geant_root_files = []
    pax_root_files = []
    sort_root_files = []
    basics_root_files = []
    double_root_files = []
    fundamentals_root_files = []
    peak_root_files = []
    total_root_files = []
    for entry in os.listdir('.'):
        if entry.endswith(geant_suffix):
            geant_root_files.append(entry)
        elif entry.endswith(sort_suffix):
            sort_root_files.append(entry)
        elif entry.endswith('pax.root'):
            pax_root_files.append(entry)
        elif entry.endswith('Basics.root'):
            basics_root_files.append(entry)
        elif entry.endswith('DoubleScatter.root'):
            double_root_files.append(entry)
        elif entry.endswith('Fundamentals.root'):
            fundamentals_root_files.append(entry)
        elif entry.endswith('LargestPeakProperties.root'):
            peak_root_files.append(entry)
        elif entry.endswith('TotalProperties.root'):
            total_root_files.append(entry)
    if len(geant_root_files) != jobs:
        sys.stderr.write("Number of Geant root files doesn't match the number"
                         " of jobs: {0} vs {1}\n".format(len(geant_root_files),
                                                         jobs))
        sys.stderr.write("An error probably occurred while processing.\n")
        return 1
    if len(sort_root_files) != jobs:
        sys.stderr.write("Number of Sort root files doesn't match the number"
                         " of jobs: {0} vs {1}\n".format(len(sort_root_files),
                                                         jobs))
        sys.stderr.write("An error probably occurred while processing.\n")
        return 1
    if len(pax_root_files) != jobs:
        sys.stderr.write("Number of PAX root files doesn't match the number"
                         " of jobs: {0} vs {1}\n".format(len(pax_root_files),
                                                         jobs))
        sys.stderr.write("An error probably occurred while processing.\n")
        return 1
    if len(basics_root_files) != jobs:
        sys.stderr.write("Number of Basics root files doesn't match the number"
                         " of jobs: {0} vs {1}\n".format(len(basics_root_files),
                                                         jobs))
        sys.stderr.write("An error probably occurred while processing.\n")
        return 1
    if len(double_root_files) != jobs:
        sys.stderr.write("Number of DoubleScatter root files doesn't " +
                         "match the number  of jobs: " +
                         "{0} vs {1}\n".format(len(double_root_files),
                                               jobs))
        sys.stderr.write("An error probably occurred while processing.\n")
        return 1
    if len(fundamentals_root_files) != jobs:
        sys.stderr.write("Number of Fundamentals root files doesn't match " +
                         "the number of jobs: " +
                         "{0} vs {1}\n".format(len(fundamentals_root_files),
                                               jobs))
        sys.stderr.write("An error probably occurred while processing.\n")
        return 1
    if len(peak_root_files) != jobs:
        sys.stderr.write("Number of LargestPeakProperties root files doesn't " +
                         "match the number  of jobs: " +
                         "{0} vs {1}\n".format(len(peak_root_files),
                                               jobs))
        sys.stderr.write("An error probably occurred while processing.\n")
        return 1
    if len(total_root_files) != jobs:
        sys.stderr.write("Number of TotalProperties root files doesn't match " +
                         "the number of jobs: " +
                         "{0} vs {1}\n".format(len(total_root_files),
                                               jobs))
        sys.stderr.write("An error probably occurred while processing.\n")
        return 1

    for output in (geant_root_files, sort_root_files):
        total_events = 0
        for root_file in output:
            g4_file = ROOT.TFile.Open(root_file)
            g4_file.cd('events')
            root_events = g4_file.Get('events')
            ttree = root_events.Get('events')
            total_events += ttree.GetEntries()

        if abs(events - total_events) > (EVENT_THRESHOLD * float(events)):
            if output == geant_root_files:
                a = "Geant"
            elif flavor == 'NEST':
                a = "Patch"
            else:
                a = "Sort"
            sys.stderr.write("{0} events differs from requested ".format(a) +
                             "events by more than {0}: ".format(EVENT_THRESHOLD) +
                             "got {0} events, expected {1}\n".format(total_events,
                                                                     events))

    total_events = 0
    for root_file in pax_root_files:
        pax_file = ROOT.TFile.Open(root_file)
        ttree = pax_file.Get('tree')
        total_events += ttree.GetEntries()
    if abs(events - total_events) > (EVENT_THRESHOLD * float(events)):
        sys.stderr.write("PAX events differs from requested " +
                         "events by more than {0}: ".format(EVENT_THRESHOLD) +
                         "got {0} events, expected {1}\n".format(total_events,
                                                                 events))
    hax_outputs = {'Basics': basics_root_files,
                   'Fundamentals': fundamentals_root_files,
                   'DoubleScatter': double_root_files,
                   'LargestPeakProperties': peak_root_files,
                   'TotalProperties': total_root_files}
    for output_type in hax_outputs:
        total_events = 0
        for root_file in hax_outputs[output_type]:
            output_file = ROOT.TFile.Open(root_file)
            ttree = output_file.Get(output_type)
            total_events += ttree.GetEntries()
        if abs(events - total_events) > (EVENT_THRESHOLD * float(events)):
            sys.stderr.write("{0} differs from requested ".format(output_type) +
                             "events by more than {0}: ".format(EVENT_THRESHOLD) +
                             "got {0} events, expected {1}\n".format(total_events,

                                                                     events))
    result_dir = os.path.join(cur_dir, 'merged_results')
    os.mkdir(result_dir)

    if not merge_files(geant_root_files, result_dir):
        sys.stderr.write("Can't merge Geant files, exiting\n")
        return 1
    if not merge_files(sort_root_files, result_dir):
        sys.stderr.write("Can't merge sort/patch files, exiting\n")
        return 1
    if not merge_files(pax_root_files, result_dir):
        sys.stderr.write("Can't merge [pax files, exiting\n")
        return 1
    if not merge_files(basics_root_files, result_dir):
        sys.stderr.write("Can't merge basics files, exiting\n")
        return 1
    if not merge_files(fundamentals_root_files, result_dir):
        sys.stderr.write("Can't merge fundamentals files, exiting\n")
        return 1
    if not merge_files(double_root_files, result_dir):
        sys.stderr.write("Can't merge double scatter files, exiting\n")
        return 1
    if not merge_files(peak_root_files, result_dir):
        sys.stderr.write("Can't merge peak files, exiting\n")
        return 1
    if not merge_files(total_root_files, result_dir):
        sys.stderr.write("Can't merge total properties files, exiting\n")
        return 1

    os.chdir(cur_dir)
if __name__ == '__main__':
    sys.exit(run_main())